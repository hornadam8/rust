{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1269,"byte_end":2163,"line_start":38,"line_end":60,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        for x in 1..15 {","highlight_start":9,"highlight_end":25},{"text":"            for y in (&x + 1)..16 {","highlight_start":1,"highlight_end":36},{"text":"                count += 1;","highlight_start":1,"highlight_end":28},{"text":"                let x_pow = i32::pow(x, 3);","highlight_start":1,"highlight_end":44},{"text":"                let y_pow = i32::pow(y, 3);","highlight_start":1,"highlight_end":44},{"text":"                let sum: i32 = x_pow + y_pow;","highlight_start":1,"highlight_end":46},{"text":"                if sum_of_cubes.contains_key(&sum) {","highlight_start":1,"highlight_end":53},{"text":"                    let (a,b) = sum_of_cubes","highlight_start":1,"highlight_end":45},{"text":"                        .remove(&sum)","highlight_start":1,"highlight_end":38},{"text":"                        .unwrap();","highlight_start":1,"highlight_end":35},{"text":"                    coupon_pieces.push(a);","highlight_start":1,"highlight_end":43},{"text":"                    coupon_pieces.push(b);","highlight_start":1,"highlight_end":43},{"text":"                    coupon_pieces.push(x);","highlight_start":1,"highlight_end":43},{"text":"                    coupon_pieces.push(y);","highlight_start":1,"highlight_end":43},{"text":"                    if coupon_pieces.len() == 16 {","highlight_start":1,"highlight_end":51},{"text":"                        let elapsed = start.elapsed().unwrap();","highlight_start":1,"highlight_end":64},{"text":"                        times.push(elapsed);","highlight_start":1,"highlight_end":45},{"text":"                        return (coupon_pieces, count)","highlight_start":1,"highlight_end":54},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                sum_of_cubes.insert(x_pow + y_pow, (x,y));","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"expected `(Vec<i32>, {integer})`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1269,"byte_end":2163,"line_start":38,"line_end":60,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        for x in 1..15 {","highlight_start":9,"highlight_end":25},{"text":"            for y in (&x + 1)..16 {","highlight_start":1,"highlight_end":36},{"text":"                count += 1;","highlight_start":1,"highlight_end":28},{"text":"                let x_pow = i32::pow(x, 3);","highlight_start":1,"highlight_end":44},{"text":"                let y_pow = i32::pow(y, 3);","highlight_start":1,"highlight_end":44},{"text":"                let sum: i32 = x_pow + y_pow;","highlight_start":1,"highlight_end":46},{"text":"                if sum_of_cubes.contains_key(&sum) {","highlight_start":1,"highlight_end":53},{"text":"                    let (a,b) = sum_of_cubes","highlight_start":1,"highlight_end":45},{"text":"                        .remove(&sum)","highlight_start":1,"highlight_end":38},{"text":"                        .unwrap();","highlight_start":1,"highlight_end":35},{"text":"                    coupon_pieces.push(a);","highlight_start":1,"highlight_end":43},{"text":"                    coupon_pieces.push(b);","highlight_start":1,"highlight_end":43},{"text":"                    coupon_pieces.push(x);","highlight_start":1,"highlight_end":43},{"text":"                    coupon_pieces.push(y);","highlight_start":1,"highlight_end":43},{"text":"                    if coupon_pieces.len() == 16 {","highlight_start":1,"highlight_end":51},{"text":"                        let elapsed = start.elapsed().unwrap();","highlight_start":1,"highlight_end":64},{"text":"                        times.push(elapsed);","highlight_start":1,"highlight_end":45},{"text":"                        return (coupon_pieces, count)","highlight_start":1,"highlight_end":54},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                sum_of_cubes.insert(x_pow + y_pow, (x,y));","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":" expected tuple `(Vec<i32>, {integer})`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"return type inferred to be `(Vec<i32>, {integer})` here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":2018,"byte_end":2040,"line_start":55,"line_end":55,"column_start":32,"column_end":54,"is_primary":true,"text":[{"text":"                        return (coupon_pieces, count)","highlight_start":32,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:38:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for x in 1..15 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            for y in (&x + 1)..16 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                count += 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let x_pow = i32::pow(x, 3);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `(Vec<i32>, {integer})`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:  expected tuple `\u001b[0m\u001b[0m\u001b[1m(Vec<i32>, {integer})\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: return type inferred to be `(Vec<i32>, {integer})` here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:55:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        return (coupon_pieces, count)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2207,"byte_end":3119,"line_start":62,"line_end":86,"column_start":36,"column_end":6,"is_primary":true,"text":[{"text":"    let handle2 = thread::spawn(|| {","highlight_start":36,"highlight_end":37},{"text":"        for x in 15..31 {","highlight_start":1,"highlight_end":26},{"text":"            for y in (&x + 1)..31 {","highlight_start":1,"highlight_end":36},{"text":"                count += 1;","highlight_start":1,"highlight_end":28},{"text":"                let x_pow = i32::pow(x, 3);","highlight_start":1,"highlight_end":44},{"text":"                let y_pow = i32::pow(y, 3);","highlight_start":1,"highlight_end":44},{"text":"                let sum: i32 = x_pow + y_pow;","highlight_start":1,"highlight_end":46},{"text":"                if sum_of_cubes.contains_key(&sum) {","highlight_start":1,"highlight_end":53},{"text":"                    let (a,b) = sum_of_cubes","highlight_start":1,"highlight_end":45},{"text":"                        .remove(&sum)","highlight_start":1,"highlight_end":38},{"text":"                        .unwrap();","highlight_start":1,"highlight_end":35},{"text":"                    coupon_pieces.push(a);","highlight_start":1,"highlight_end":43},{"text":"                    coupon_pieces.push(b);","highlight_start":1,"highlight_end":43},{"text":"                    coupon_pieces.push(x);","highlight_start":1,"highlight_end":43},{"text":"                    coupon_pieces.push(y);","highlight_start":1,"highlight_end":43},{"text":"                    if coupon_pieces.len() == 16 {","highlight_start":1,"highlight_end":51},{"text":"                        let elapsed = start.elapsed().unwrap();","highlight_start":1,"highlight_end":64},{"text":"                        times.push(elapsed);","highlight_start":1,"highlight_end":45},{"text":"                        return (coupon_pieces, count)","highlight_start":1,"highlight_end":54},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                sum_of_cubes.insert(x_pow + y_pow, (x,y));","highlight_start":1,"highlight_end":59},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    });","highlight_start":1,"highlight_end":6}],"label":"expected `(Vec<i32>, {integer})`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":" expected tuple `(Vec<i32>, {integer})`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:62:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let handle2 = thread::spawn(|| {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m____________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for x in 15..31 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            for y in (&x + 1)..31 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                count += 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    });\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `(Vec<i32>, {integer})`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:  expected tuple `\u001b[0m\u001b[0m\u001b[1m(Vec<i32>, {integer})\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
